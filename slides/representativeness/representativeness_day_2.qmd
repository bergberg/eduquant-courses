---
title: "Representativeness"
subtitle: "Day 2"
author: 
 - Pieter van den Berg
 - Ryan van Lamoen
 - Taoying Farenhorst
date: 2023-10-09
date-format: long
format: eduquant-slides-revealjs
---


## Day 2

::: columns
::: {.column width="15%"}
*13:00*

*13:30*

*14:30*

*15:30*

*16:30*

:::

::: {.column width="85%"}
Case study discussion & Recap

Economic & Market Conditions

Definition of Default

General estimation process

Case Study #2
:::
:::
::: footer 
```{r }
#| dev.args:
#|   bg: "transparent"
#| fig.asp: 1
#| fig.width: 2
library(qrcode)
code <- qr_code("https://quantprofessionals.github.io/eduquant-courses/slides/representativeness/representativeness_day_2.html")
plot(code)
```
:::



# Case study discussion
```{r setup}
library(dplyr)
library(ggplot2)
library(latex2exp)
case_study_2_data <- read.csv("../../media/case_study_2_data.csv.gz")
bg <- 'transparent'
ggtheme <- theme_minimal()+theme(
                           panel.background = element_rect(fill=bg, linetype = "blank"), 
                           plot.background = element_rect(fill=bg, color=NA), 
                           panel.grid.major = element_blank(), 
                           panel.grid.minor = element_blank(), 
                           legend.background = element_rect(fill=bg, linetype = "blank"), 
                           legend.box.background = element_rect(fill=bg, linetype = "blank"))

cl_err <- 0.68

plotdata <- 
case_study_2_data |>
  filter(!d,t<108L) |>  
  ungroup() %>% 
  {bind_rows(
    group_by(., t, subportfolio)|> 
  summarize(
        D_t_ci = binom::binom.bayes(conf.level=cl_err,sum(into_d_12), n(), type="highest"),
         into_dr_12 = D_t_ci$mean,
         into_dr_12_upper = D_t_ci$upper,
         into_dr_12_lower = D_t_ci$lower,
         .groups="drop"
  ),
  group_by(.,t)|> 
  summarize(
    subportfolio="Total",
        D_t_ci = binom::binom.bayes(conf.level=cl_err,sum(into_d_12), n(), type="highest"),
         into_dr_12 = D_t_ci$mean,
         into_dr_12_upper = D_t_ci$upper,
         into_dr_12_lower = D_t_ci$lower,
                  .groups="drop"
         )
    )}|> select(-D_t_ci)
  
plotdf <- case_study_2_data |>
  filter(!d,t<108L) |>  
  group_by(t) |> 
  summarize(
    D_A = sum(subportfolio=="A" & into_d_12),
    D_B = sum(subportfolio=="B" & into_d_12),
    n_A = sum(subportfolio=="A"),
    n_B = sum(subportfolio=="B"),
    .groups="drop"
  ) |> 
  mutate(
    D_A_t_ci = binom::binom.bayes(conf.level=cl_err,D_A, n_A, type="highest"),
         D_A_t = D_A_t_ci$mean,
         D_A_t_upper = D_A_t_ci$upper,
         D_A_t_lower = D_A_t_ci$lower,
    D_B_t_ci = binom::binom.bayes(conf.level=cl_err,D_B, n_B, type="highest"),
         D_B_t = D_B_t_ci$mean,
         D_B_t_upper = D_B_t_ci$upper,
         D_B_t_lower = D_B_t_ci$lower,
    D_tot_t_ci = binom::binom.bayes(conf.level=cl_err,D_A+D_B, n_A+n_B, type="highest"),
         D_tot_t = D_tot_t_ci$mean,
         D_tot_t_upper = D_tot_t_ci$upper,
         D_tot_t_lower = D_tot_t_ci$lower,
    r_A_t_ci = binom::binom.bayes(conf.level=cl_err,n_A, n_A+n_B, type="highest"),
         r_A_t = r_A_t_ci$mean,
         r_A_t_upper = r_A_t_ci$upper,
         r_A_t_lower = r_A_t_ci$lower,
    s_A_t_ci = binom::binom.bayes(conf.level=cl_err,D_A, D_A+D_B, type="highest"),
         s_A_t = s_A_t_ci$mean,
         s_A_t_upper = s_A_t_ci$upper,
         s_A_t_lower = s_A_t_ci$lower)

    plotdfs <- plotdf |> 
      filter(t<108L,t>=82) |> 
      summarise(
         r_A_0 = mean(r_A_t),
         r_A_0_upper = mean(r_A_t_upper),
         r_A_0_lower = mean(r_A_t_lower),
         s_A_0 = mean(s_A_t),
         s_A_0_upper = mean(s_A_t_upper),
         s_A_0_lower = mean(s_A_t_lower),
         )

     plotdf2 <-
      plotdf |> transmute(
        t,
        subportfolio="Adjusted",
        into_dr_12 = if_else(
          t >= 82,
          D_tot_t,
          D_A_t*plotdfs$r_A_0/plotdfs$s_A_0
        ),
        into_dr_12_upper = if_else(
          t >= 82,
          D_tot_t_upper,
          D_A_t_upper*plotdfs$r_A_0_upper/plotdfs$s_A_0
        ),
        into_dr_12_lower = if_else(
          t >= 82,
          D_tot_t_lower,
          D_A_t_lower*plotdfs$r_A_0_lower/plotdfs$s_A_0
        )
        ) |> 
      bind_rows(plotdata)
    
    aggrplotdata2 <- group_by(plotdf2, subportfolio) |> summarise(
      mean_into_dr_12 = mean(into_dr_12, na.rm=TRUE), 
      mean_into_dr_12_sd = sd(into_dr_12, na.rm=TRUE)/sqrt(n()),
      mean_into_dr_12_upper = mean(into_dr_12_upper),
      mean_into_dr_12_lower = mean(into_dr_12_lower),
      min_t= min(t)) |> mutate(min_t=min(min_t)) 

aggrplotdata <- filter(aggrplotdata2,subportfolio!="Adjusted")

``` 


## Case study: scope of application { .smaller .r-fit-text auto-animate="true"}

:::: columns

::: {.column width="50%" #vcenter .r-fit-text }


#### Description

 * Two homogeneous segments A and B


::: 

::: {.column width="50%" #vcenter .r-fit-text }

```{r segment_plot}
#| dev.args:
#|   bg: "transparent"
#| fig.asp: 1
#| fig.width: 3
#| 

ggplot2::theme_set(ggtheme + theme(legend.position = "bottom"))
case_study_2_data |> 
    count(t,status,subportfolio) |> 
    ggplot(aes(x=t,y=n)) + 
    geom_area(aes(fill=status), alpha=.66) + 
    facet_grid(rows=vars(subportfolio),) +
    labs(caption="subportfolio breakdown by status", y = "nr of exposures") +
    scale_fill_manual(values = c("default" = "darkred", "stock"="lightgrey", "exit"="steelblue","enter"="darkgreen"))
```

:::


::::


## Case study: scope of application {.smaller .r-fit-text auto-animate="true"}

:::: columns

::: {.column width="50%" .r-fit-text }


#### Description

 * Two homogeneous segments A and B

 [...with a varying share $\frac{n_A}{n_A+n_B}(t)$]{style="color:darkcyan"}

::::: {.fragment .fade-in fragment-index=2}
 ...different (stationary) default levels 
:::::
::::: {.fragment .fade-in fragment-index=2}
 
:::::
::::: {.fragment .fade-in fragment-index=3} 
[**$\rightarrow$ What is the correct/allowed treatment**?]{style="color:slateblue"}
:::::


```{r segment_plot}
#| dev.args:
#|   bg: "transparent"
#| fig.asp: 1
#| fig.width: 3

```
::: 

::: {.column width="50%" .r-fit-text }



```{r ratio_plot}
#| dev.args:
#|   bg: "transparent"
#| fig.asp: 1
#| fig.width: 3
ggplot2::theme_set(ggtheme + theme(legend.position = "bottom"))
 ggplot(plotdf,aes(t, r_A_t)) + 
  geom_rect(data=NULL,ymin=-Inf,ymax=Inf,xmin=82,xmax=107, fill=NA,alpha=0)+
  geom_pointrange(aes(ymin=r_A_t_lower,ymax=r_A_t_upper), shape = 'x',size = 0.3,color="darkcyan", linewidth=0.5) +
  scale_y_continuous(limits = c(0,NA), labels = scales::label_percent()) +
  labs(caption="share of A",y=latex2exp::TeX("$\\frac{n_A}{n_A+n_B}$"))
```

:::


::::

## Case study: scope of application {.smaller .r-fit-text auto-animate="true"}

:::: columns

::: {.column width="50%" .r-fit-text }


#### Description

 * Two homogeneous segments A and B

 [...with a varying share $\frac{n_A}{n_A+n_B}(t)$]{style="color:darkcyan"}

::::: {.fragment .fade-in fragment-index=2}
 ...different (stationary) default levels 
:::::
::::: {.fragment .fade-in fragment-index=2}
 
:::::
::::: {.fragment .fade-in fragment-index=3} 
[**$\rightarrow$ What is the correct/allowed treatment**?]{style="color:slateblue"}
:::::


```{r segment_plot}
#| dev.args:
#|   bg: "transparent"
#| fig.asp: 1
#| fig.width: 3

```
::: 

::: {.column width="50%" .r-fit-text }



```{r ratio_plot}
#| dev.args:
#|   bg: "transparent"
#| fig.asp: 1
#| fig.width: 2
```

```{r dr_plot}
#| dev.args:
#|   bg: "transparent"
#| fig.asp: 1
#| fig.width: 3
ggplot2::theme_set(ggtheme + theme(legend.position = "bottom"))

  plotdf2 |> 
  filter(subportfolio!="Adjusted") |>
  ggplot(aes(t, into_dr_12, color = subportfolio)) + 
  geom_pointrange(aes(ymin=into_dr_12_lower,ymax=into_dr_12_upper ), shape = 'x',size = 0.3) +
  scale_y_continuous(limits = c(0,NA), labels = scales::label_percent()) +
  scale_color_brewer(palette="Dark2")+
  geom_hline(data = aggrplotdata, aes(yintercept=mean_into_dr_12, colour = subportfolio),linetype = "dashed") +
  geom_text(data=aggrplotdata, aes(min_t,color=subportfolio, mean_into_dr_12,label = scales::label_percent(accuracy = 0.1)(mean_into_dr_12)), hjust = 0, nudge_y = .02, size=2.5, show.legend=FALSE) +
  labs(caption="12 month into-default rate ", y= "default rate")
```
:::


::::


## Case study: scope of application {.smaller .r-fit-text auto-animate="true"}

:::: columns

::: {.column width="65%" .r-fit-text }


#### Description

 * Two homogeneous segments A and B

 [...with a varying share $\frac{n_A}{n_A+n_B}(t)$]{style="color:darkcyan"}

 ...different (stationary) default levels
 
 [**$\rightarrow$ Treatment depends on segmentation dimension**]{style="color:slateblue"}

|Segmentation|Level of risk|Treatment|
|--|--|--|


::: 

::: {.column width="35%" .r-fit-text }

```{r ratio_plot}
#| dev.args:
#|   bg: "transparent"
#| fig.asp: 1
#| fig.width: 2
```
```{r dr_plot}
#| dev.args:
#|   bg: "transparent"
#| fig.asp: 1
#| fig.width: 3
```
:::


::::


## Case study: scope of application {.smaller .r-fit-text auto-animate="true"}

:::: columns

::: {.column width="65%" .r-fit-text }


#### Treatment

 [**$\rightarrow$ Treatment depends on segmentation dimension**]{style="color:slateblue"}

|Segmentation|Level of risk|Treatment|
|--|--|--|
|Behavioural|point-in-time|None/grade/pool|
|Econ. cond.|point-in-time|None/grade/pool|
|Econ. cond.|LRA/DT|Calibration segment|
|Fac./obligor type|cond. LRA/DT|Calibration segment|
|Processes|cond. LRA/DT|Type of exposures|
|*Other*|*cond. LRA/DT*|*Appropriate adjustment*|




::: 

::: {.column width="35%" .r-fit-text }


![](/media/rating_system_calib_segm_small.drawio.svg)
```{r dr_plot}
#| dev.args:
#|   bg: "transparent"
#| fig.asp: 1
#| fig.width: 3
```


:::


::::



## Case study: scope of application {.smaller .r-fit-text auto-animate="true"}

:::: columns

::: {.column width="65%" .r-fit-text }


#### Treatment

 $\rightarrow$ Treatment depends on segmentation dimension

|Segmentation|Level of risk|Treatment|
|--|--|--|
|*Other*|*cond. LRA/DT*|*Appropriate adjustment*|

 $\rightarrow$ Adjust calibraton target for [**effect of non-representativeness**]{style="color:slateblue"}

::::{.fragment}
![](/media/representativeness_simple.drawio.svg)
::::
::: 

::: {.column width="35%" .r-fit-text }

```{r ratio_plot}
#| dev.args:
#|   bg: "transparent"
#| fig.asp: 1
#| fig.width: 3
```
```{r dr_plot}
#| dev.args:
#|   bg: "transparent"
#| fig.asp: 1
#| fig.width: 3
```
:::


::::





## Case study: scope of application {.smaller .r-fit-text auto-animate="true"}

:::: columns

::: {.column width="50%" .r-fit-text }



 [$\rightarrow$ Adjust calibraton target for effect of non-representativeness]{style="color:slateblue"}
 
##### Representative of what?
 * Modelling problem
 * Typical approach: assume something reasonable

:::::{.fragment fragment-index=2}
 * Need to model [defaults]{style="color:darkred"} and [performing]{style="color:darkcyan"}
:::::
::: 

::: {.column width="50%" .r-fit-text }


:::::: {.r-stack}
```{r ratio_plot}
#| dev.args:
#|   bg: "transparent"
#| fig.asp: 1
#| fig.width: 4
```

:::::{.fragment fragment-index=2}
```{r ratio_plot2}
#| dev.args:
#|   bg: "transparent"
#| fig.asp: 1
#| fig.width: 4
ggplot2::theme_set(ggtheme + theme(legend.position = "bottom"))
 ggplot(plotdf,aes(t, r_A_t)) + 
  geom_rect(data=NULL,ymin=-Inf,ymax=Inf,xmin=82,xmax=107, fill="#F5F5DC",alpha=0.1)+
  geom_pointrange(aes(ymin=r_A_t_lower,ymax=r_A_t_upper), shape = 'x',size = 0.3,color="darkcyan", linewidth=0.5) +
  geom_pointrange(aes(y=s_A_t,ymin=s_A_t_lower,ymax=s_A_t_upper), shape = 'x',size = 0.3,color="darkred", linewidth=0.5) +
  scale_y_continuous(limits = c(0,NA), labels = scales::label_percent()) +
  labs(caption="share of A",y=latex2exp::TeX("$\\frac{n_A}{n_A+n_B}$"))
```
:::::

::::::
:::


::::



## Case study: scope of application {.smaller .r-fit-text auto-animate="true"}

:::: columns

::: {.column width="50%" .r-fit-text }



 [$\rightarrow$ Adjust calibraton target for effect of non-representativeness]{style="color:slateblue"}
 
##### Representative of what?
 * Modelling problem
 * Typical approach: assume something reasonable

 * Need to model [defaults]{style="color:darkred"} and [performing]{style="color:darkcyan"}
::: 

::: {.column width="50%" .r-fit-text }


:::::: {.r-stack}

```{r ratio_plot5}
#| dev.args:
#|   bg: "transparent"
#| fig.asp: 1
#| fig.width: 4
ggplot2::theme_set(ggtheme + theme(legend.position = "bottom"))
 ggplot(plotdf,aes(t, r_A_t)) + 
  geom_rect(data=NULL,ymin=-Inf,ymax=Inf,xmin=82,xmax=107, fill="#F5F5DC",alpha=0.1)+
  geom_pointrange(aes(ymin=r_A_t_lower,ymax=r_A_t_upper), shape = 'x',size = 0.3,color="darkcyan", linewidth=0.5) +
  geom_pointrange(aes(y=s_A_t,ymin=s_A_t_lower,ymax=s_A_t_upper), shape = 'x',size = 0.3,color="darkred", linewidth=0.5) +
  geom_smooth(data=filter(plotdf,t>=82), formula = y ~ 1, color = "darkcyan", linetype="dashed", method="lm", fullrange=TRUE) +
  geom_smooth(data=filter(plotdf,t>=82), aes(y=s_A_t),formula = y ~ 1, color = "darkred", linetype="dashed", method="lm", fullrange=TRUE) +
  geom_text(data=plotdfs,aes(x=107,y=r_A_0,label = scales::label_percent(accuracy = 1)(r_A_0)), nudge_x=3,nudge_y = -0.05, color="darkcyan", size=3) +
  geom_text(data=plotdfs,aes(x=107,y=s_A_0,label = scales::label_percent(accuracy = 1)(s_A_0)),  nudge_x=3, nudge_y = -0.05, color="darkred", size=3) +
  scale_y_continuous(limits = c(0,NA), labels = scales::label_percent()) +
  labs(caption="share of A",y=latex2exp::TeX("$\\frac{n_A}{n_A+n_B}$"))
```
::::::

:::


::::


## Case study: scope of application {.smaller .r-fit-text auto-animate="true"}

:::: columns

::: {.column width="50%" .r-fit-text }



[$\rightarrow$ Adjust calibraton target for effect of non-representativeness]{style="color:slateblue"}

[$r_0\sim\frac{1}{S}\sum_{u=1...S}\frac{n_A}{n_A+n_B}(t_{u_0}+u)$]{style="color:darkcyan"}

[$s_0\sim\frac{1}{S}\sum_{u=1...S}\frac{D_A}{D_A+D_B}(t_{u_0}+u)$]{style="color:darkred"}

::: 

::: {.column width="50%" .r-fit-text }


:::::: {.r-stack}

```{r ratio_plot5}
#| dev.args:
#|   bg: "transparent"
#| fig.asp: 1
#| fig.width: 2

```
::::::

:::


::::

## Case study: scope of application {.smaller .r-fit-text auto-animate="true"}

:::: columns

::: {.column width="50%" .r-fit-text }



[$\rightarrow$ Adjust calibraton target for effect of non-representativeness]{style="color:slateblue"}

[$r_0\sim\frac{1}{S}\sum_{u=1...S}\frac{n_A}{n_A+n_B}(t_{u_0}+u)$]{style="color:darkcyan"}

[$s_0\sim\frac{1}{S}\sum_{u=1...S}\frac{D_A}{D_A+D_B}(t_{u_0}+u)$]{style="color:darkred"}


::: 

::: {.column width="50%" .r-fit-text }

```{r ratio_plot5}
#| dev.args:
#|   bg: "transparent"
#| fig.asp: 1
#| fig.width: 2
```
:::
::::
:::: columns

::: {.column width="50%" .r-fit-text }
[$$D^\prime(t\le t_{u_0})=D_A(t) \frac{r_0}{s_0} \pm \sqrt{\sigma^2_{D_A}\frac{r^2_0}{s^2_0}+... } $$]{style="color:green"}



:::::{.fragment}
##### Adjusted calibration target

[$$\bar{D}^\prime = \frac{1}{T}\sum_t D^\prime(t) \pm \sqrt{...}$$]{style="color:green"}
:::::



:::
::: {.column width="50%" .r-fit-text }

:::{data-id=zfsd}
```{r dr_plot_adj}
#| dev.args:
#|   bg: "transparent"
#| fig.asp: 1
#| fig.width: 3

aggrdf <- filter(aggrplotdata2,subportfolio!="Total")
plotdf2 |>
filter(subportfolio!="Total")|>
ggplot(aes(t, into_dr_12, color = subportfolio)) + 
  geom_rect(data=NULL,ymin=-Inf,ymax=Inf,xmin=82,xmax=107, fill="#F5F5DC",alpha=0.1,color=NA)+
  geom_pointrange(aes(ymin=into_dr_12_lower,ymax=into_dr_12_upper ), shape = 'x',size = 0.3) +
  scale_y_continuous(limits = c(0,NA), labels = scales::label_percent()) +
  geom_hline(data=aggrdf, aes(yintercept=mean_into_dr_12, colour = subportfolio),  linetype = "dashed") +
  geom_text(data=aggrdf, aes(x=107,color=subportfolio, mean_into_dr_12,label = scales::label_percent(accuracy = 0.1)(mean_into_dr_12)),  nudge_x=5, nudge_y = 0.01, size=3,legend=FALSE) +
  labs(caption="Stationary portfolio simulated 12 month into-default rate", y="default rate")

```
:::
:::

::::


## Case study: scope of application {.smaller .r-fit-text auto-animate="true"}

:::: columns

::: {.column  #vcenter width="50%" .r-fit-text }
[$$D^\prime(t\le t_{u_0})=D_A(t) \frac{r_0}{s_0} \pm \sqrt{\sigma^2_{D_A}\frac{r^2_0}{s^2_0}+... } $$]{style="color:green"}

##### Adjusted calibration target

[$$\bar{D}^\prime = \frac{1}{T}\sum_t D^\prime(t) \pm \sqrt{...}$$]{style="color:green"}

 * target increased, in line with assumptions
 * increased uncertainty $\sim \sigma_{r_0}, \sigma_{s_0}$
 * toy example! in real life:
    - understand & model explicitly instead
    - validate assumptions


:::
::: {.column  #vcenter width="50%" .r-fit-text }

::: {data-id=zfsd}
```{r dr_plot_adj2}
#| dev.args:
#|   bg: "transparent"
#| fig.asp: 1
#| fig.width: 4

aggrdf2 <- filter(aggrplotdata2)
plotdf2 |>
filter(subportfolio!="Total")|>
ggplot(aes(t, into_dr_12, color = subportfolio)) + 
  geom_rect(data=NULL,ymin=-Inf,ymax=Inf,xmin=82,xmax=107, fill="#F5F5DC",alpha=0.1,color=NA)+
  geom_pointrange(aes(ymin=into_dr_12_lower,ymax=into_dr_12_upper ), shape = 'x',size = 0.3) +
  scale_y_continuous(limits = c(0,NA), labels = scales::label_percent()) +
  geom_hline(data=aggrdf2, aes(yintercept=mean_into_dr_12, colour = subportfolio),  linetype = "dashed") +
  geom_text(data=aggrdf2, aes(x=107,color=subportfolio, mean_into_dr_12,label = scales::label_percent(accuracy = 0.1)(mean_into_dr_12)),  nudge_x=5, nudge_y = 0.01, size=3,legend=FALSE) +
  labs(caption="Stationary portfolio simulated 12 month into-default rate", y="default rate")

```
:::

:::
::::

